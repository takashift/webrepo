package main

import (
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gorilla/sessions"
	"github.com/labstack/echo"
	"github.com/labstack/echo-contrib/session"
	"github.com/labstack/echo/middleware"
)

func login(c echo.Context) error {
	// username := c.FormValue("username")
	// password := c.FormValue("password")

	// if username == "jon" && password == "shhh!" {
	// Create token
	token := jwt.New(jwt.SigningMethodHS256)

	// Set claims
	claims := token.Claims.(jwt.MapClaims)
	claims["name"] = "Jon Snow"
	claims["admin"] = true
	claims["exp"] = time.Now().Add(time.Hour * 72).Unix()

	// Generate encoded token and send it as response.
	t, err := token.SignedString([]byte("oppai"))
	if err != nil {
		return err
	}
	// c.Request().Header.Set(echo.HeaderCookie, "Bearer "+t)
	// // Header.Set(echo.HeaderAuthorization, "Bearer "+t)
	// // c.SetRequest(h)

	c.Response().Header().Set(echo.HeaderAuthorization, fmt.Sprintf("Bearer "+t))
	// fmt.Fprintf(os.Stderr, "header:%s\n", c.Request().Header.Get(echo.HeaderCookie))
	// fmt.Fprintf(os.Stderr, "header:%s\n", c.Response().Header().Get(echo.HeaderAuthorization))

	sess, err := session.Get("session", c)
	if err != nil {
		return err
	}
	sess.Options = &sessions.Options{
		Path:     "/",
		MaxAge:   86400 * 7,
		HttpOnly: true,
	}
	sess.Values["token"] = t
	sess.Save(c.Request(), c.Response())

	// return c.HTML(http.StatusOK, "<script>var xhr = new XMLHttpRequest();xhr.onreadystatechange = function (){if(xhr.readyState == 2){localStorage.jwt = xhr.getResponseHeader('Authorization');console.log(xhr.getResponseHeader(\"Authorization\"));console.log(xhr.getResponseHeader(\"Content-Type\"))}};</script>")
	// return c.HTML(http.StatusOK, "<script>localStorage.jwt = 'Bearer "+t+"';console.log(localStorage.jwt);</script>")
	return c.JSON(http.StatusOK, map[string]string{
		"token": t,
	})

	// return echo.ErrUnauthorized
}

func accessible(c echo.Context) error {
	fmt.Fprintf(os.Stderr, "header:%s\n", c.Request().Header.Get(echo.HeaderAuthorization))
	fmt.Fprintf(os.Stderr, "Cookie:%s\n", c.Request().Header.Get(echo.HeaderCookie))
	sess, err := session.Get("session", c)
	if err != nil {
		return err
	}
	fmt.Fprintf(os.Stderr, "token:%s\n", sess.Values["token"])
	t, err := jwt.Parse(sess.Values["token"].(string), func(token *jwt.Token) (interface{}, error) {
		return []byte("oppai"), nil
	})
	fmt.Fprintf(os.Stderr, "token:%v\n", t)
	return c.String(http.StatusOK, "Accessible")
}

func restricted(c echo.Context) error {
	fmt.Fprintf(os.Stderr, "header:%s\n", c.Request().Header.Get(echo.HeaderAuthorization))
	user := c.Get("user").(*jwt.Token)
	fmt.Fprintf(os.Stderr, "unk:%v\n", user)
	claims := user.Claims.(jwt.MapClaims)
	name := claims["name"].(string)
	return c.String(http.StatusOK, "Welcome "+name+"!")
}

func cookieToAuthMiddleware(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {

		sess, _ := session.Get("session", c)
		if sess.Values["token"] != nil {
			t := sess.Values["token"].(string)
			c.Request().Header.Set(echo.HeaderAuthorization, "Bearer "+t)

			fmt.Fprintf(os.Stderr, "token:%v\n", t)
			return next(c)
		}

		// リクエストされたURLを記入
		fmt.Fprintf(os.Stderr, "reqURL:%v\n", c.Request().URL)
		sess.Options = &sessions.Options{
			Path:     "/",
			MaxAge:   86400 * 7,
			HttpOnly: true,
		}
		sess.Values["refererURL"] = c.Request().URL
		sess.Save(c.Request(), c.Response())

		return next(c)
		// サインイン画面へリダイレクト
		// return c.Redirect(http.StatusMovedPermanently, "/s")
	}
}

func main() {
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.Use(session.Middleware(sessions.NewCookieStore([]byte("secret"))))

	// Login route
	e.GET("/login", login)

	// Unauthenticated route
	e.GET("/", accessible)

	e.GET("/s", func(c echo.Context) error {
		return c.String(http.StatusOK, "OK")
	})

	e.GET("/a", func(c echo.Context) error {
		fmt.Fprintf(os.Stderr, "header:%s\n", c.Request().Header.Get(echo.HeaderAuthorization))
		c.Set("unk", "kuso")
		fmt.Fprintf(os.Stderr, "unk:%s\n", c.Get("unk"))
		return c.String(http.StatusOK, "Accessible")
	})

	e.GET("/b", func(c echo.Context) error {
		fmt.Fprintf(os.Stderr, "header:%s\n", c.Request().Header.Get(echo.HeaderAuthorization))
		fmt.Fprintf(os.Stderr, "Cookie:%s\n", c.Request().Header.Get(echo.HeaderCookie))

		fmt.Fprintf(os.Stderr, "unk:%s\n", c.Get("unk"))
		return c.HTML(http.StatusOK, "<script>var xhr = new XMLHttpRequest();console.log(localStorage.jwt);xhr.open('GET', '/');xhr.setRequestHeader('Authorization', localStorage.jwt);xhr.send();</script>")
	})

	// Restricted group
	r := e.Group("/r")
	r.Use(cookieToAuthMiddleware)
	r.Use(middleware.JWT([]byte("oppai")))
	r.GET("/e", func(c echo.Context) error {
		return c.String(http.StatusOK, "Accessible")
	})
	r.GET("/i", restricted)

	e.Logger.Fatal(e.Start(":1323"))
}
